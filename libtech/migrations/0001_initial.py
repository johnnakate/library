# Generated by Django 3.2.7 on 2022-02-14 15:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(auto_created=True, null=True, serialize=False, unique=True)),
                ('type', models.CharField(choices=[('Room', 'Room'), ('Seat', 'Seat')], max_length=50, null=True)),
                ('category', models.CharField(choices=[('Pitch Room', 'PitchRoom'), ('Multimedia Nook', 'MultimediaNook'), ('Discussion Room #1', 'DiscussionRoom#1'), ('Discussion Room #2', 'DiscussionRoom#2'), ('Discussion Room #3', 'DiscussionRoom#3')], max_length=100)),
            ],
            options={
                'db_table': 'Room',
            },
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(auto_created=True, null=True, serialize=False, unique=True)),
                ('type', models.CharField(choices=[('Room', 'Room'), ('Seat', 'Seat')], max_length=50, null=True)),
                ('category', models.CharField(choices=[('Activity Loft', 'ACTIVITY LOFT'), ('Cit-u cafe', 'CIT-U CAFE'), ('Collaboration Room', 'COLLABORATION ROOM'), ('CompuHub', 'COMPUHUB'), ('Activity Center', 'ACTVITY CENTER'), ('Elliptical', 'ELLIPTICAL AREA'), ('Exhibit Area', 'EXHIBIT AREA'), ('Filipiniana', 'FILIPIANA'), ('Octagon', 'OCTAGON'), ('Reading Duo', 'READING DUO'), ('Reading Hub', 'READING HUB'), ('Carrels', 'CARRELS')], max_length=50, null=True)),
            ],
            options={
                'db_table': 'Seat',
            },
        ),
        migrations.CreateModel(
            name='SeatReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('seat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='libtech.seat')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'SeatReservation',
            },
        ),
        migrations.CreateModel(
            name='Seat_Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField(null=True)),
                ('description', models.TextField(max_length=100, null=True)),
                ('seat_image', models.ImageField(default='seats.png', upload_to='seats')),
                ('seat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='libtech.seat')),
            ],
            options={
                'db_table': 'Seat_Type',
            },
        ),
        migrations.CreateModel(
            name='RoomReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled')], max_length=50, null=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='libtech.room')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'RoomReservation',
            },
        ),
        migrations.CreateModel(
            name='Room_Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField(null=True)),
                ('description', models.TextField(max_length=100, null=True)),
                ('room_image', models.ImageField(default='room.png', upload_to='rooms')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='libtech.room')),
            ],
            options={
                'db_table': 'Room_Type',
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField(null=True)),
                ('date', models.DateField()),
                ('start_time', models.TimeField(null=True)),
                ('end_time', models.TimeField(null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled')], max_length=50, null=True)),
                ('room_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='libtech.room')),
                ('seat_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='libtech.seat')),
                ('users', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Reservation',
            },
        ),
    ]
